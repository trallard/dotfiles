[user]
	name = Tania Allard
	email = taniar.allard@gmail.com
	signingKey = ""

# Client work
# [includeIf "gitdir:~/Documents/github/.../.."]
# 	path= ~/dev/work/.gitconfig

[alias]
	# history: logs in different formats
	# hash, date, comment, author
	hist = log --pretty=format:\"%C(bold blue)%h%C(reset) %C(magenta)%ad%C(reset) | %s%C(yellow)%d%C(reset) - %C(dim white)[%an]\" --graph --date=short --decorate
	hists = log --pretty=format:\"%C(bold blue)%h%C(reset) %C(magenta)%ad%C(reset) | %s%C(yellow)%d%C(reset) - %C(dim white)[%an]\" --abbrev-commit --graph --date=short
	histt = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold magenta)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	tree = log --graph --pretty=oneline --abbrev-commit
	oneline = log --oneline --decorate=short
	lg = log --color --decorate --graph --pretty=format:'%C(magenta)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) - [%an]%Creset' --abbrev-commit

	# reset head to a given commit
	unstage = reset HEAD --
	unmerge = git reset --hard HEAD
	last = log -1 HEAD    # last commit
	co = checkout		  # checkout
	ci = commit
	cim = commit -m       # commit with message
	fpa = fetch --prune --all --tags
	mffo = merge --ff-only
	new = log master..upstream/master
	s = status -s

	# list commit HEAD
	ch = rev-parse --short HEAD
	# List aliases
	aliases = config --get-regexp alias
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with main
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Codereview aliases
	change = codereview change
	gofmt = codereview gofmt
	mail = codereview mail
	pending = codereview pending
	submit = codereview submit
	sync = codereview sync

	# refresh upstream
	yoink="git checkout master && git fetch upstream master && git merge upstream/master"
	# like yoink but better
	yoinkk="git checkout main && git fetch upstream main && git merge upstream/main"

	# trallard branch pattern
	newb = "!f() { git checkout -b trallard/$1; }; f"

	# sort branches by commit date
	brd ="git branch --sort=-committerdate"

	# check runs with watch_gha_runs
	runs = "!f() { \
        watch_gha_runs $@ \
            \"$(git remote get-url origin)\" \
            \"$(git rev-parse --abbrev-ref HEAD)\"; \
    }; f"


[apply]
	# Detect change in case
	ignorecase = false
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	editor = /Applications/Visual\\ Studio\\ Code.app/Contents/Resources/app/bin/code
	ignorecase = false
	excludesfile = $HOME/.gitignore_global
	pager = diff-so-fancy | less --tabs=4 -RFX

[color]
    status = auto
    branch = auto
    ui = true

[color "branch"]
	current = magenta reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

# note these are added by nbdime
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
[credential]
	helper = osxkeychain
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[init]
	defaultBranch = main
[gpg]
	program = gpg
	format = openpgp
[commit]
	gpgSign = false
[tag]
	forceSignAnnotated = false
[gpg "ssh"]
	program = ssh-keygen
	allowedSignersFile = ""

[branch]
# sort more recent branches first
	sort = -committerdate
[github]
	user = trallard
[interactive]
	diffFilter = diff-so-fancy --patch
