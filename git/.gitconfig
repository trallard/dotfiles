[user]
	name = Tania Allard
	email = taniar.allard@gmail.com
	signingKey =

# Client work
# [includeIf "gitdir:~/Documents/github/.../.."]
# 	path= ~/dev/work/.gitconfig

[alias]
	# ------------------------------------------------------------------------------
	# Logging and displaying information about the repository
	# history: logs in different formats
	# hash, date, comment, author
	hist = log --pretty=format:\"%C(bold blue)%h%C(reset) %C(magenta)%ad%C(reset) | %s%C(yellow)%d%C(reset) - %C(dim white)[%an]\" --graph --date=short --decorate
	hists = log --pretty=format:\"%C(bold blue)%h%C(reset) %C(magenta)%ad%C(reset) | %s%C(yellow)%d%C(reset) - %C(dim white)[%an]\" --abbrev-commit --graph --date=short
	histt = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold magenta)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	tree = log --graph --pretty=oneline --abbrev-commit
	oneline = log --oneline --decorate=short
	lg = log --color --decorate --graph --pretty=format:'%C(magenta)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) - [%an]%Creset' --abbrev-commit
	last = log -1 HEAD    # last commit

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# ------------------------------------------------------------------------------
	# Miscellaneous actions (quick daily stuff)
	unstage = reset HEAD --  			# reset head to a given commit
	unmerge = git reset --hard HEAD
	marty = unmerge
	sw = git switch
	fpa = fetch --prune --all --tags
	mffo = merge --ff-only
	new = log master..upstream/master
	s = status -s  						# short status
	ss = status -s -b --show-stash 		# short status including stash

	# Check runs with watch_gha_runs
	runs = "!f() { \
        watch_gha_runs $@ \
            \"$(git remote get-url origin)\" \
            \"$(git rev-parse --abbrev-ref HEAD)\"; \
    }; f"

	# ------------------------------------------------------------------------------
	# Commiting changes
	ci = commit
	cim = commit -m       				# commit with message
	ch = rev-parse --short HEAD 		# list commit HEAD
	amend = commit --amend --no-edit 	# update the last commit with latest changes to file
    edit = commit --amend --only 		# update the commit message on latest commit
	amends = commit --amend --reuse-message=HEAD # amend the currently staged files to the latest commit

	# List aliases
	aliases = config --get-regexp alias
	alias=!git config -l | grep ^alias | cut -c 7- | sort

	flict = "!f(){ git ls-files -u | awk '{print $4}' | sort -u; }; f" # list conflicted files

	# Get a plain-text diff, for making patches.
    patch = "!f() { git --no-pager diff $@; }; f"

	# ------------------------------------------------------------------------------
	# Finding stuff in a repository
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# ------------------------------------------------------------------------------
	# Dealing with branches in a repository
	# Remove branches that have already been merged into the primary branch
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	# Check branches merged into the primary branch
	merged = "!f() {\
        git branch --merged $(git primary); \
        }; f"

	# trallard branch pattern
	newb = "!f() { git checkout -b trallard/$1; }; f"

	# Identify the primary branch for the repository
	primary = "!f() { \
        git branch -a | \
        sed -n -E -e '/remotes.origin.ma(in|ster)$/s@remotes/origin/@@p'; \
    }; f"

	# Switch to the primary branch and update it
	pu = "!f() { \
        git checkout $(git primary) && \
        git pull; \
    }; f"

	# Pull the upstream primary branch and update my fork
	yoinkf = "!f() { \
        git pu && \
        git pull upstream $(git primary) --ff-only && \
        git push; \
    }; f"

	# refresh upstream primary branch
	# like yoink but better
	yoinkk="git checkout main && git fetch upstream main && git merge upstream/main"
	yoink="!f() { \
        git pu && \
        git pull upstream $(git primary) --ff-only; \
    }; f"

	# Show branches, verbosely, sorted by last touch, with commit messages
    br = "!f() { \
        local date='%(color:reset)%(creatordate:short)'; \
        local upstream='%(color:bold)%(color:white)%(align:2,right)%(upstream:trackshort)%(end)%(color:nobold)'; \
        local refname='%(align:40,left)%(color:yellow)%(refname:short)%(end)%(color:reset)'; \
        local subject='%(contents:subject)'; \
        git branch --sort=-creatordate --color=always --format=$date' '$upstream' '$refname' '$subject; \
    }; f"

	# Merge a branch and delete it here and in the origin (needs branch name)
	brmerge = "!f() { \
        : git show; \
        git merge $1 && \
        git branch -d $1 && \
        git push origin --delete $1; \
    }; f"

	# Delete a branch here and on the origin.
    # The switch $1 is to get an entry in the reflog now, in case we need to recover the branch.
    brdel = "!f() { : git show; git switch $1 && git switch - && git branch -D $1 && git push ${2:-origin} --delete $1; }; f"

	# ------------------------------------------------------------------------------
	# Code review and collaboration
	# Credit an author on the latest commit (Name, email)
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Code review
	change = codereview change			# create a new pending change from the staged changes in the current branch or, if there is already a pending change, amends that change
	pending = codereview pending	   # show the pending change
	sync = codereview sync			   # sync local repo


[apply]
	# Detect change in case
	ignorecase = false
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	editor = /Applications/Visual\\ Studio\\ Code.app/Contents/Resources/app/bin/code
	ignorecase = false
	# Use custom `.gitignore`
	excludesfile = ~/.gitignore_global
	pager = diff-so-fancy | less --tabs=4 -RFX
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[color]
    status = auto
    branch = auto
    ui = true

[color "branch"]
	current = magenta reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold 		# line info
	old = red 				    # deletions
	new = green 				# additions

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[diff]
	# Detect copies as well as renames
	renames = copies

# note these are added by nbdime
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[mergetool]
	prompt = false
[credential]
	helper = osxkeychain
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[init]
	defaultBranch = main
[gpg]
	program = gpg
	format = openpgp
[commit]
	gpgSign = false
[tag]
	forceSignAnnotated = false
[gpg "ssh"]
	program = ssh-keygen
	allowedSignersFile =

[branch]
# sort more recent branches first
	sort = -committerdate
[github]
	user = trallard
[interactive]
	diffFilter = diff-so-fancy --patch
