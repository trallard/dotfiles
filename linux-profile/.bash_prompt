#!/usr/bin/env bash

export PS1="\u@\h:\w\\$ "

# vanilla mac
if [[ $OSTYPE == darwin* ]]; then
    export PS1="\u@\[$(tput sgr0)\]\[\033[32;5;214m\]\h\[$(tput sgr0)\]:\w\\$ "
fi

# get branch and username
export PS1="\[\e[91m\]\[\033[01;36m\]\u\[\033[m\]\[\033[38;5;141m\] \[\e[00m\] \033[38;5;105m\]\w \033[38;5;219m\] \$(parse_git_branch)\[\e[00m\] $ "

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*) ;;

esac

# ----------------------------------------
#!/bin/bash
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.
# vim: set filetype=sh :

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color'
elif infocmp rxvt-unicode-256color >/dev/null 2>&1; then
    export TERM='rxvt-unicode'
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color'
fi

prompt_git() {
    local s=''
    local branchName=''

    # Check if the current directory is in a Git repository.
    if [ "$(
        git rev-parse --is-inside-work-tree &>/dev/null
        echo "${?}"
    )" == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2>/dev/null)" == 'false' ]; then

            if [[ -O "$(git rev-parse --show-toplevel)/.git/index" ]]; then
                git update-index --really-refresh -q &>/dev/null
            fi

            # Check for uncommitted changes in the index.
            if ! git diff --quiet --ignore-submodules --cached; then
                s+='+'
            fi

            # Check for unstaged changes.
            if ! git diff-files --quiet --ignore-submodules --; then
                s+='!'
            fi

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?'
            fi

            # Check for stashed files.
            if git rev-parse --verify refs/stash &>/dev/null; then
                s+='$'
            fi

        fi

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2>/dev/null ||
            git rev-parse --short HEAD 2>/dev/null ||
            echo '(unknown)')"

        [ -n "${s}" ] && s=" [${s}]"

        echo -e "${1}${branchName}${blue}${s}"
    else
        return
    fi
}

cloud=""
if [[ -f /proc/cpuinfo ]] && grep -q "^flags.* hypervisor" /proc/cpuinfo && [[ ! -d "/mnt/c/Windows/" ]]; then
    cloud="☁️ "
fi

if tput setaf 1 &>/dev/null; then
    tput sgr0 # reset colors
    bold=$(tput bold)
    reset=$(tput sgr0)
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0)
    blue=$(tput setaf 4)
    cyan=$(tput setaf 6)
    green=$(tput setaf 2)
    orange=$(tput setaf 3)
    purple=$(tput setaf 5)
    red=$(tput setaf 1)
    violet=$(tput setaf 13)
    white=$(tput setaf 7)
    yellow=$(tput setaf 11)
else
    bold=''
    reset="\\e[0m"
    # shellcheck disable=SC2034
    black="\\e[1;30m"
    blue="\\e[1;34m"
    cyan="\\e[1;36m"
    green="\\e[1;32m"
    # shellcheck disable=SC2034
    orange="\\e[1;33m"
    # shellcheck disable=SC2034
    purple="\\e[1;35m"
    red="\\e[1;31m"
    violet="\\e[1;35m"
    white="\\e[1;37m"
    yellow="\\e[1;33m"
fi

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}"
else
    userStyle="${blue}"
fi

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${cyan}"
else
    hostStyle="${cyan}"
fi

# Set the terminal title to the current working directory.
PS1="\\[\\033]0;\\w\\007\\]"
PS1+="\\[${bold}\\]\\n"      # newline
PS1+="\\[${userStyle}\\]\\u" # username
PS1+="\\[${white}\\] @ "
PS1+="\\[${hostStyle}\\]${cloud}\\h" # host
PS1+="\\[${white}\\] |  "
PS1+="\\[${green}\\]\\w"                        # working directory
PS1+="\$(prompt_git \"${white} on ${violet}\")" # Git repository details
PS1+="\\n"
PS1+="\\[${white}\\]\$ \\[${reset}\\]" # `$` (and reset color)
export PS1

PS2="\\[${yellow}\\]→ \\[${reset}\\]"
export PS2
